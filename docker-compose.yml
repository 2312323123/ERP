# you have to create .env file next to this file with credentials for it to work
# also put microservices databases credentials here as well as in init-db/create_databases.sql
services:
  # if you change this name, you have to change it in DB_PSQL_SERVICE_NAME as well
  db-psql:
    image: postgres:latest
    networks:
      - backend
      - db_admin_sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # UNCOMMENT THIS TO PERSIST DATA
    # volumes:
    # - ./db_postgres/db_data:/var/lib/postgresql/data
    configs:
      - source: db-psql-create_databases.sql
        target: /docker-entrypoint-initdb.d/create_databases.sql
      - source: db-psql-init.sql
        target: /docker-entrypoint-initdb.d/init.sql

  # psql-client:
  #   image: postgres:13
  #   entrypoint: ["tail", "-f", "/dev/null"]
  #   networks:
  #     - backend

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: surveys_db # Set the default database name
    # UNCOMMENT THIS TO PERSIST DATA
    # volumes:
    #   - mongo_data:/data/db # Persist data
    networks:
      - backend
      - db_admin_mongo

  pgadmin:
    build:
      context: .
      dockerfile: ./pgadmin/dockerfile_for_pgadmin
    networks:
      - db_admin_sql
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL_PART_BEFORE_AT}@${PGADMIN_DEFAULT_EMAIL_PART_AFTER_AT}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    # process to find this was pain
    entrypoint: >
      /bin/sh -c "
      mkdir -p /var/lib/pgadmin/storage/${PGADMIN_DEFAULT_EMAIL_PART_BEFORE_AT}_${PGADMIN_DEFAULT_EMAIL_PART_AFTER_AT}/;
      cp /tmp/mountpoint.pgpass /var/lib/pgadmin/storage/${PGADMIN_DEFAULT_EMAIL_PART_BEFORE_AT}_${PGADMIN_DEFAULT_EMAIL_PART_AFTER_AT}/.pgpass;
      chown pgadmin:root /var/lib/pgadmin/storage/${PGADMIN_DEFAULT_EMAIL_PART_BEFORE_AT}_${PGADMIN_DEFAULT_EMAIL_PART_AFTER_AT}/.pgpass;
      chmod 600 /var/lib/pgadmin/storage/${PGADMIN_DEFAULT_EMAIL_PART_BEFORE_AT}_${PGADMIN_DEFAULT_EMAIL_PART_AFTER_AT}/.pgpass;
      /entrypoint.sh
      "
    configs:
      - source: pgadmin-servers.json
        target: /pgadmin4/servers.json
      - source: pgadmin-pgpass
        target: /tmp/mountpoint.pgpass
    depends_on:
      - db-psql

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/
    networks:
      - db_admin_mongo
    depends_on:
      - mongo

  auth_and_permissions:
    build:
      context: ./auth_and_permissions
      dockerfile: Dockerfile
    ports:
      - "3000:3000" # Expose the NestJS application port
    volumes:
      - ./auth_and_permissions:/app
      - /app/node_modules
    networks:
      - backend
    environment:
      - NODE_ENV=development
      - DB_PSQL_SERVICE_NAME=${DB_PSQL_SERVICE_NAME}
      # command: npm run start:dev
      - DB_NAME=${AUTH_SERVICE_DB_NAME}
      - DB_USERNAME=${AUTH_SERVICE_DB_USER}
      - DB_PASSWORD=${AUTH_SERVICE_DB_PASSWORD}
      - AUTH_GOOGLE_CLIENT_ID=${AUTH_GOOGLE_CLIENT_ID}
      - AUTH_GOOGLE_CLIENT_SECRET=${AUTH_GOOGLE_CLIENT_SECRET}
      - AUTH_GOOGLE_ORGANIZATION_DOMAIN=${AUTH_GOOGLE_ORGANIZATION_DOMAIN}
      - AUTH_RSA_PRIVATE_KEY_FOR_JWT=${AUTH_RSA_PRIVATE_KEY_FOR_JWT}
      - RSA_PUBLIC_KEY_FOR_JWT=${RSA_PUBLIC_KEY_FOR_JWT}
    stdin_open: true
    tty: true
    depends_on:
      - db-psql

  surveys_phase:
    build:
      context: ./recruitment_survey_phase
      dockerfile: Dockerfile
    # ports:
    #   - "3000:3000" # Expose the NestJS application port
    volumes:
      - ./recruitment_survey_phase:/app
      - /app/node_modules
    networks:
      - backend
    environment:
      - NODE_ENV=development
      - DB_PSQL_SERVICE_NAME=${DB_PSQL_SERVICE_NAME}
      # command: npm run start:dev
      - DB_NAME=${SURVEY_SERVICE_DB_NAME}
      - DB_USERNAME=${SURVEY_SERVICE_DB_USER}
      - DB_PASSWORD=${SURVEY_SERVICE_DB_PASSWORD}
    stdin_open: true
    tty: true
    depends_on:
      - db-psql

  # erp-backend:
  #   build:
  #     context: ./ERP-backend # Point to the directory containing your Dockerfile
  #     dockerfile: Dockerfile # Specify Dockerfile if it's named differently
  #   # ports:
  #   #   - "3000:3000" # Expose the NestJS application port
  #   volumes:
  #     - ./ERP-backend:/app # Mount the current directory to /app in the container for hot reloading
  #     - /app/node_modules # Avoid mounting node_modules from the host machine
  #   networks:
  #     - backend
  #   environment:
  #     - NODE_ENV=development # Set the environment to development
  #   command: npm run start:dev # Start the NestJS app with hot reloading
  #   stdin_open: true # Keep stdin open
  #   tty: true # Allocate a pseudo-TTY

  frontend:
    build:
      context: ./frontend # Specify the build context (directory where the Dockerfile is located)
      dockerfile: Dockerfile # Specify the Dockerfile name (if it's named differently)
    # ports:
    #   - "8080:8080"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - frontend
    stdin_open: true
    tty: true
    expose:
      - "8080"

  nginx:
    build:
      context: ./API-gateway
    networks:
      - outside
      - backend
      - frontend
      - db_admin_sql
      - db_admin_mongo
    ports:
      - "10016:80" # Exposes port 80 on the host and forwards it to port 80 in the container.
    depends_on:
      - auth_and_permissions
      - frontend

networks:
  frontend: # if named frontend_network, for some reason does not work
  outside:
  backend:
  db_admin_sql:
  db_admin_mongo:

configs:
  db-psql-create_databases.sql:
    content: |
      /*
        login to superuser: docker exec -it erp-db-psql-1 psql -U <user_name_from_docker_compose_env_file>
        login to user: docker exec -it erp-db-psql-1 psql -U <user_name> -d <db_name>

        using '-' in env variables here is discouraged as it requires escaping
        WARNING: if you change env variables later on, you can lose all data in the database (can't login)
      */

      -- first microservice
      -- Create the database
      CREATE DATABASE "${AUTH_SERVICE_DB_NAME}";
      ALTER DATABASE "${AUTH_SERVICE_DB_NAME}" SET TIME ZONE 'Europe/Warsaw';
      -- Create the user if it doesn't exist
      CREATE USER "${AUTH_SERVICE_DB_USER}" WITH PASSWORD '${AUTH_SERVICE_DB_PASSWORD}';
      -- Grant privileges on the database
      GRANT ALL PRIVILEGES ON DATABASE "${AUTH_SERVICE_DB_NAME}" TO "${AUTH_SERVICE_DB_USER}";

      -- survey_phase microservice
      -- Create the database
      CREATE DATABASE "${SURVEY_SERVICE_DB_NAME}";
      ALTER DATABASE "${SURVEY_SERVICE_DB_NAME}" SET TIME ZONE 'Europe/Warsaw';
      -- Create the user if it doesn't exist
      CREATE USER "${SURVEY_SERVICE_DB_USER}" WITH PASSWORD '${SURVEY_SERVICE_DB_PASSWORD}';
      -- Grant privileges on the database
      GRANT ALL PRIVILEGES ON DATABASE "${SURVEY_SERVICE_DB_NAME}" TO "${SURVEY_SERVICE_DB_USER}";
  db-psql-init.sql:
    content: |
      -- first microservice
      -- Connect to the newly created database
      \c "${AUTH_SERVICE_DB_NAME}"
      -- Grant privileges on the public schema
      GRANT ALL PRIVILEGES ON SCHEMA public TO "${AUTH_SERVICE_DB_USER}";

      -- survey_phase microservice
      -- Connect to the newly created database
      \c "${SURVEY_SERVICE_DB_NAME}"
      -- Grant privileges on the public schema
      GRANT ALL PRIVILEGES ON SCHEMA public TO "${SURVEY_SERVICE_DB_USER}";

  pgadmin-pgpass:
    content: db-psql:5432:*:${POSTGRES_USER}:${POSTGRES_PASSWORD}
  pgadmin-servers.json:
    content: |
      {
        "Servers": {
          "1": {
            "Name": "PostgreSQL",
            "Group": "Servers",
            "Host": "db-psql",
            "Port": 5432,
            "MaintenanceDB": "postgres",
            "Username": "${POSTGRES_USER}",
            "ConnectionParameters": {
              "sslmode": "prefer",
              "connect_timeout": "10",
              "passfile": "/.pgpass"
            }
          }
        }
      }
