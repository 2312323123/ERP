# this is the base docker-compose file, rather run the system using docker-compose.override.yml and docker-compose.prod.yml

# you have to create .env file next to this file with credentials for it to work
# also put microservices databases credentials here as well as in init-db/create_databases.sql
services:
  # if you change this name, you have to change it in DB_PSQL_SERVICE_NAME as well
  db-psql:
    image: postgres:latest
    networks:
      - backend
      - db_admin_sql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    # UNCOMMENT THIS TO PERSIST DATA
    # volumes:
    # - ./db_postgres/db_data:/var/lib/postgresql/data  # Persist data # One day could be checked for performance vs when named volume
    configs:
      - source: db-psql-create_databases.sql
        target: /docker-entrypoint-initdb.d/create_databases.sql
      - source: db-psql-init.sql
        target: /docker-entrypoint-initdb.d/init.sql

  # # docker-compose exec -it curl_service sh
  # curl_service:
  #   image: curlimages/curl:latest
  #   depends_on:
  #     - mongo_express # Wait for this service to be available
  #   entrypoint: ["sleep", "infinity"] # Keep the container running
  #   networks:
  #     - outside
  #     - backend
  #     - frontend
  #     - db_admin_sql
  #     - db_admin_mongo

  # psql-client:
  #   image: postgres:13
  #   entrypoint: ["tail", "-f", "/dev/null"]
  #   networks:
  #     - backend

  mongo:
    # docker-compose exec -it mongo /bin/bash
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    # UNCOMMENT THIS TO PERSIST DATA
    # volumes:
    #   - mongo_data:/data/db # Persist data # One day could be checked for performance vs when named volume
    expose:
      - "27017" # documentation purposes
    networks:
      - backend
      - db_admin_mongo
    configs:
      - source: mongo-init-script
        target: /docker-entrypoint-initdb.d/mongo-init.js

  pgadmin:
    build:
      context: .
      dockerfile: ./pgadmin/dockerfile_for_pgadmin
    networks:
      - db_admin_sql
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL_PART_BEFORE_AT}@${PGADMIN_DEFAULT_EMAIL_PART_AFTER_AT}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    # process to find this was pain
    entrypoint: >
      /bin/sh -c "
      mkdir -p /var/lib/pgadmin/storage/${PGADMIN_DEFAULT_EMAIL_PART_BEFORE_AT}_${PGADMIN_DEFAULT_EMAIL_PART_AFTER_AT}/;
      cp /tmp/mountpoint.pgpass /var/lib/pgadmin/storage/${PGADMIN_DEFAULT_EMAIL_PART_BEFORE_AT}_${PGADMIN_DEFAULT_EMAIL_PART_AFTER_AT}/.pgpass;
      chown pgadmin:root /var/lib/pgadmin/storage/${PGADMIN_DEFAULT_EMAIL_PART_BEFORE_AT}_${PGADMIN_DEFAULT_EMAIL_PART_AFTER_AT}/.pgpass;
      chmod 600 /var/lib/pgadmin/storage/${PGADMIN_DEFAULT_EMAIL_PART_BEFORE_AT}_${PGADMIN_DEFAULT_EMAIL_PART_AFTER_AT}/.pgpass;
      /entrypoint.sh
      "
    configs:
      - source: pgadmin-servers.json
        target: /pgadmin4/servers.json
      - source: pgadmin-pgpass
        target: /tmp/mountpoint.pgpass
    depends_on:
      - db-psql

  mongo_express:
    image: mongo-express
    restart: always
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/
      ME_CONFIG_SITE_BASEURL: /api/mongolia/ # this is the base url for the mongo-express for working with nginx
    networks:
      - db_admin_mongo
    # ports:
    #   - "8081:8081"
    expose:
      - "8081" # documentation purposes
    depends_on:
      - mongo

  auth_and_permissions:
    build:
      context: ./auth_and_permissions
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - DB_PSQL_SERVICE_NAME=${DB_PSQL_SERVICE_NAME}
      - DB_NAME=${AUTH_SERVICE_DB_NAME}
      - DB_USERNAME=${AUTH_SERVICE_DB_USER}
      - DB_PASSWORD=${AUTH_SERVICE_DB_PASSWORD}
      - AUTH_GOOGLE_CLIENT_ID=${AUTH_GOOGLE_CLIENT_ID}
      - AUTH_GOOGLE_CLIENT_SECRET=${AUTH_GOOGLE_CLIENT_SECRET}
      - AUTH_GOOGLE_ORGANIZATION_DOMAIN=${AUTH_GOOGLE_ORGANIZATION_DOMAIN}
      - AUTH_RSA_PRIVATE_KEY_FOR_JWT=${AUTH_RSA_PRIVATE_KEY_FOR_JWT}
      - RSA_PUBLIC_KEY_FOR_JWT=${RSA_PUBLIC_KEY_FOR_JWT}
      - AUTH_NO_REPLY_EMAIL=${AUTH_NO_REPLY_EMAIL}
      - AUTH_NO_REPLY_EMAIL_PASSWORD=${AUTH_NO_REPLY_EMAIL_PASSWORD}
    expose:
      - "3000" # documentation purposes
    depends_on:
      - db-psql

  recruitment_survey_phase:
    build:
      context: ./recruitment_survey_phase
      dockerfile: Dockerfile
    networks:
      - backend
    environment:
      - DB_PSQL_SERVICE_NAME=${DB_PSQL_SERVICE_NAME}
      - DB_NAME=${SURVEY_SERVICE_DB_NAME}
      - DB_USERNAME=${SURVEY_SERVICE_DB_USER}
      - DB_PASSWORD=${SURVEY_SERVICE_DB_PASSWORD}
      - RSA_PUBLIC_KEY_FOR_JWT=${RSA_PUBLIC_KEY_FOR_JWT}
      - SURVEY_SERVICE_MONGO_USER=${SURVEY_SERVICE_MONGO_USER}
      - SURVEY_SERVICE_MONGO_PASSWORD=${SURVEY_SERVICE_MONGO_PASSWORD}
    expose:
      - "3000" # documentation purposes
    depends_on:
      - db-psql
      - mongo

  frontend:
    build:
      context: ./frontend # Specify the build context (directory where the Dockerfile is located)
      dockerfile: Dockerfile # Specify the Dockerfile name (if it's named differently)
    networks:
      - frontend
    expose:
      - "8080" # documentation purposes

  nginx:
    build:
      context: ./API-gateway
    networks:
      - outside
      - backend
      - frontend
      - db_admin_sql
      - db_admin_mongo
    ports:
      - "10016:80" # Exposes port 80 on the host and forwards it to port 80 in the container.
    depends_on:
      - auth_and_permissions
      - recruitment_survey_phase
      - frontend
      - mongo_express
      # maybe putting pgadmin here can make it cooperate with nginx...

networks:
  frontend: # if named frontend_network, for some reason does not work
  outside:
  backend:
  db_admin_sql:
  db_admin_mongo:

configs:
  mongo-init-script:
    content: |
      // Switch to the `surveys_db` database
      db = db.getSiblingDB("surveys_db");

      // Create the user within `surveys_db`
      db.createUser({
        user: "${SURVEY_SERVICE_MONGO_USER}",
        pwd: "${SURVEY_SERVICE_MONGO_PASSWORD}",
        roles: [
          {
            role: "readWrite",
            db: "surveys_db",
          },
        ],
      });
      // 'mongodb://${SURVEY_SERVICE_MONGO_USER}:${SURVEY_SERVICE_MONGO_PASSWORD}@localhost:27017/surveys_db',
  db-psql-create_databases.sql:
    content: |
      /*
        login to superuser: docker exec -it erp-db-psql-1 psql -U <user_name_from_docker_compose_env_file>
        login to user: docker exec -it erp-db-psql-1 psql -U <user_name> -d <db_name>

        using '-' in env variables here is discouraged as it requires escaping
        WARNING: if you change env variables later on, you can lose all data in the database (can't login)
      */

      -- first microservice
      -- Create the database
      CREATE DATABASE "${AUTH_SERVICE_DB_NAME}";
      ALTER DATABASE "${AUTH_SERVICE_DB_NAME}" SET TIME ZONE 'Europe/Warsaw';
      -- Create the user if it doesn't exist
      CREATE USER "${AUTH_SERVICE_DB_USER}" WITH PASSWORD '${AUTH_SERVICE_DB_PASSWORD}';
      -- Grant privileges on the database
      GRANT ALL PRIVILEGES ON DATABASE "${AUTH_SERVICE_DB_NAME}" TO "${AUTH_SERVICE_DB_USER}";

      -- survey_phase microservice
      -- Create the database
      CREATE DATABASE "${SURVEY_SERVICE_DB_NAME}";
      ALTER DATABASE "${SURVEY_SERVICE_DB_NAME}" SET TIME ZONE 'Europe/Warsaw';
      -- Create the user if it doesn't exist
      CREATE USER "${SURVEY_SERVICE_DB_USER}" WITH PASSWORD '${SURVEY_SERVICE_DB_PASSWORD}';
      -- Grant privileges on the database
      GRANT ALL PRIVILEGES ON DATABASE "${SURVEY_SERVICE_DB_NAME}" TO "${SURVEY_SERVICE_DB_USER}";
  db-psql-init.sql:
    content: |
      -- first microservice
      -- Connect to the newly created database
      \c "${AUTH_SERVICE_DB_NAME}"
      -- Grant privileges on the public schema
      GRANT ALL PRIVILEGES ON SCHEMA public TO "${AUTH_SERVICE_DB_USER}";

      -- survey_phase microservice
      -- Connect to the newly created database
      \c "${SURVEY_SERVICE_DB_NAME}"
      -- Grant privileges on the public schema
      GRANT ALL PRIVILEGES ON SCHEMA public TO "${SURVEY_SERVICE_DB_USER}";

  pgadmin-pgpass:
    content: db-psql:5432:*:${POSTGRES_USER}:${POSTGRES_PASSWORD}
  pgadmin-servers.json:
    content: |
      {
        "Servers": {
          "1": {
            "Name": "PostgreSQL",
            "Group": "Servers",
            "Host": "db-psql",
            "Port": 5432,
            "MaintenanceDB": "postgres",
            "Username": "${POSTGRES_USER}",
            "ConnectionParameters": {
              "sslmode": "prefer",
              "connect_timeout": "10",
              "passfile": "/.pgpass"
            }
          }
        }
      }
